{"version":3,"sources":["Alert.js","About.js","Navbar.js","TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","react_default","a","createElement","style","height","alert","className","concat","type","role","message","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","About","myStyle","color","mode","backgroundColor","Fragment","id","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","react_router_dom","to","title","aria-label","aboutText","onClick","toggleMode","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","heading","value","onChange","event","console","log","target","rows","newTxt","showAlert","disabled","length","txt","split","i","UpdatedCase","join","navigator","clipboard","writeText","newText","filter","element","App","setMode","_useState3","_useState4","setAlert","setTimeout","document","body","react_router","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.03904c13.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Alertstyle.css\"\n\nexport default function Alert(props) {\n    const capitalize = (message)=> {\n        let lower = message.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n  return (\n    <div style={{height: \"50px\"}}>\n   {props.alert && \n   <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n  <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n \n</div> }\n</div>\n\n  )\n}\n","import React, { useState } from 'react'\n\n\n\n\nexport default function About(props) {\n    // const [myStyle,setMyStyle] = useState( {\n    //     color:\"black\",\n    //     backgroundColor: \"white\"\n    // })\n    let myStyle= {\n      color: props.mode!==\"light\"?\"white\":\"black\",\n      backgroundColor : props.mode!==\"light\"?\"black\":\"white\"\n    }\n    // const [btnText,setBtnText] = useState('Enable Dark Mode')\n    \n    // const toggleStyle= ()=> {\n    //     if(myStyle.color===\"black\") {\n    //         setMyStyle({\n    //             color: \"white\",\n    //             backgroundColor:\"black\"\n    //         })\n    //         setBtnText(\"Enable Light Mode\")\n    \n    //     }\n    //     else {\n    //         setMyStyle({\n    //             color: \"black\",\n    //             backgroundColor:\"white\"\n    //         })\n    //     }\n    // }\n  return (\n    <>\n    <div className=\"container\" >\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\n  <div className=\"accordion-item\" style={myStyle}>\n    <h2 className=\"accordion-header\" id=\"headingOne\">\n      <button className=\"accordion-button\"  style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n       <strong style={myStyle}>Analyse Your Text</strong> \n      </button>\n    </h2>\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\" style={myStyle}>\n     TextUtils gives you a way to analyse your text quickly and efficiently.Be iyt word count,character count or\n      </div>\n    </div>\n  </div>\n  <div className=\"accordion-item\" style={myStyle}>\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n       <strong style={myStyle}> Free to use</strong>\n      </button>\n    </h2>\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\" style={myStyle}>\n        TextUtis is a free character counter tool that provides instant character count and word count statistics for a given text.textutils reports the no. of words and characters. Thus it is suitable for writing text with word/ character limit.\n      \n      </div>\n    </div>\n  </div>\n  <div className=\"accordion-item\" style={myStyle}>\n    <h2 className=\"accordion-header\" id=\"headingThree\">\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" >\n        <strong >Browser Compatible</strong>\n      </button>\n    </h2>\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\" style={myStyle}>\n        This word counter software works in any browserssuch Internet Explorer, Safari, Chrome, Firefox, Opera.\n      </div>\n    </div>\n  </div>\n</div>\n\n    </div>\n    {/* <div className=\"container my-3\">\n    <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btnText}</button>\n  </div> */}\n  </>\n  )\n}\n","import React from 'react'\n// import PropTypes from 'prop-types'\nimport \"./Navstyle.css\";\nimport {Link } from \"react-router-dom\";\n\n\n\nexport default function Navbar(props) {\n  // let mystyle= {\n  //   display: \"flex\",\n  \n  // }\n  \n  \n    return (\n        <nav className={`navbar navbar-expand-lg bg-${props.mode} text-${props.mode==='light'?'dark':'light'}`}>\n          \n  <div className=\"container-fluid\" >\n    \n    <Link className={`navbar-brand text-${props.mode==='light'?'dark':'light'} `} to=\"/\">{props.title}</Link>\n   \n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n       \n          <Link className={`nav-Link active\" aria-current=\"page  text-${props.mode==='light'?'dark':'light'}`} to=\"/\">Home</Link>\n         \n        </li>\n        <li className=\"nav-item \">\n       \n          <Link className={` nav-Link active\" aria-current=\"page  text-${props.mode==='light'?'dark':'light'}`} to=\"/about\">{props.aboutText}</Link>\n          \n        </li>\n        \n          </ul >\n          \n          {/* <div className=\"btn-group\" role=\"group\" aria-label=\"Basic mixed styles example\">\n           <span> Choose Theme: </span> */}\n          \n  {/* <button type=\"button\" className=\"btn\" id=\"rTheme\" onClick={props.RedTheme}></button>\n  <button type=\"button\" className=\"btn\" id='bTheme' onClick={props.BlueTheme}></button>\n    <button type=\"button\" className=\"btn\" id='gTheme' onClick={props.GreenTheme}></button> */}\n{/* </div>  */}\n\n  {/* <div className='d-flex'>\n    <div className=\"bg-primary rounded mx-2\" onClick={()=> {props.toggleMode('primary')}} style={{height: \"30px\", width: \"30px\", cursor: 'pointer'}}>\n    </div>\n    <div className=\"bg-secondary rounded mx-2\" onClick={()=> {props.toggleMode('secondary')}} style={{height: \"30px\", width: \"30px\", cursor: 'pointer'}}>\n    </div>\n    <div className=\"bg-danger rounded mx-2\" onClick={()=> {props.toggleMode('danger')}} style={{height: \"30px\", width: \"30px\", cursor: 'pointer'}}>\n    </div>\n    <div className=\"bg-warning rounded mx-2\" onClick={()=> {props.toggleMode('warning')}} style={{height: \"30px\", width: \"30px\", cursor: 'pointer'}}>\n    </div>\n    <div className=\"bg-info rounded mx-2\" onClick={()=> {props.toggleMode('info')}} style={{height: \"30px\", width: \"30px\", cursor: 'pointer'}}>\n    </div>\n    {/* <div className=\"bg-muted rounded mx-2\" onClick={()=> {props.toggleMode('muted')}} style={{height: \"30px\", width: \"30px\", cursor: 'pointer'}}> */}\n    {/* </div> */}\n    {/* <div className=\"bg-light rounded mx-2\" onClick={()=> {props.toggleMode('light')}} style={{height: \"30px\", width: \"30px\", cursor: 'pointer'}}>\n    </div>\n    <div className=\"bg-dark rounded mx-2\" onClick={()=> {props.toggleMode('dark')}} style={{height: \"30px\", width: \"30px\", cursor: 'pointer'}}>\n    </div> */}\n  {/* </div>  */}\n\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" aria-checked=\"false\"/>\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\n</div>\n    </div>\n  </div>\n  \n</nav>\n\n    )\n }\n// Navbar.propTypes = {\n//     title: PropTypes.string.isRequired,\n//     aboutText: PropTypes.string.isRequired\n// }\n// Navbar.defaultProps= {\n//     title: \"This is title\",\n//     aboutText: \"about Text\"\n// }","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpclick= ()=>{\n        // console.log(\"Upper case was clicked\");\n        let newTxt= text.toUpperCase();\n        setText(newTxt);\n        props.showAlert(\"Converted to upper case\", \"success\");\n    }\n    const handleClearClick= ()=>{\n        // console.log(\"Upper case was clicked\");\n        let newTxt= \"\"\n        setText(newTxt);\n        props.showAlert(\"Text Cleared\", \"success\");\n    }\n    const handleLoclick= ()=>{\n        // console.log(\"Upper case was clicked\"); \n        let newTxt= text.toLowerCase();\n        setText(newTxt);\n        props.showAlert(\"Converted to lower case\", \"success\");\n    }\n    const handleOnChange= (event)=>{\n        console.log(\"OnChange\");\n        setText(event.target.value);\n    }\n    const handleCopy = () => {\n      // var text = document.getElementById(\"myBox\");\n      // text.select();\n      // document.getSelection().removeAllRanges();\n\n      navigator.clipboard.writeText(text);\n  }\n  const handleExtraSpaces = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"))\n}\n    const CapitalFirst= ()=>{\n      let txt = text.split(\".\");\n      // console.log(txt)\n      for(let i=0;i<txt.length;i++) {\n        // console.log(txt[i].charAt(0))\n       txt[i] = txt[i].charAt(0).toUpperCase() + txt[i].slice(1);\n      //  console.log(txt[i])\n      props.showAlert(\"Converted first letter of sentence capital\", \"success\");\n      }\n      let UpdatedCase= txt.join(\".\") \n      // console.log(UpdatedCase)\n      setText(UpdatedCase);\n\n    }\n  \n\n    const [text, setText] = useState(\"\");\n  return (\n    <>\n    <div className=\"container\">\n    <div className='my-3'>\n  <div> \n    <h1 id='mainHead'> {props.heading} </h1>\n  </div>\n<div className=\"mb-3\">\n  {/* {console.log(props.mode)}\n  {console.log(\"a\")} */}\n  <textarea className=\"form-control exampleFormControlTextarea1\"  value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\" style= {{ color: props.mode === \"dark\"?\"white\":\"black\", backgroundColor: props.mode === \"light\"?\"white\":\"black\" }}></textarea>\n</div>\n<button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpclick} disabled={text.length===0}> Change to Uppercase</button>\n<button className=\"btn btn-primary mx-1 my-1\" onClick={handleLoclick} disabled={text.length===0}> Change to Lowercase</button>\n<button className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick} disabled={text.length===0}> Clear Text</button>\n<button className=\"btn btn-primary mx-1 my-1\" onClick={CapitalFirst} disabled={text.length===0}>Capitalize First</button>\n<button className=\"btn btn-primary mx-1\"  onClick={handleCopy} disabled={text.length===0}>Copy Text</button>\n<button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces} disabled={text.length===0} >Remove extra spaces</button>\n    </div>\n    </div>\n    <div className=\"container\">\n        <h3>Your text summary</h3>\n        <p> {text.length>0?text.split(/\\s+/).filter((element)=> { return element.length!==0}).length:0} Words and {text.length} Characters</p>\n        <p>{0.008*text.split(\" \").filter((element)=> { return element.length!==0}).length} minutes read </p>\n        <h2>Preview</h2>\n        <p>{text.length>0?text:\"Nothing to preview\"}</p>\n    \n    </div>\n    </>\n\n  )\n}\n","\nimport React, { useState } from 'react';\nimport Alert from './Alert';\nimport About from './About';\nimport './App.css';\nimport Navbar from './Navbar';\nimport TextForm from './TextForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link,\n  // withRouter\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode,setMode]= useState(\"light\")\n  const [alert,setAlert]= useState(null)\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout( ()=> {\n      setAlert(null)\n\n  }, 1500);\n  }\n  // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.color = 'white';\n  // const removeBodyClasses= ()=> {\n  //   document.body.classList.remove('bg-light')\n  //   document.body.classList.remove('bg-dark')\n  //   document.body.classList.remove('bg-warning')\n  //   document.body.classList.remove('bg-danger')\n  //   document.body.classList.remove('bg-primary')\n  //   document.body.classList.remove('bg-info')\n  //   document.body.classList.remove('bg-muted')\n  //   document.body.classList.remove('bg-secondary')\n  // }\n\n  const toggleMode= ()=>{\n    // console.log(cls);\n    // removeBodyClasses();\n    // document.body.classList.add('bg-'+ cls)\n\n    if(mode !== \"dark\") {\n      setMode(\"dark\");\n      showAlert(\"Enabled dark mode\", \"success\");\n      document.body.style.backgroundColor = 'black';\n      // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.backgroundColor = 'black';\n      document.body.style.color= \"white\"\n      // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.color = 'white';\n      document.title=\"TextUtils - Dark Mode\"\n      // setInterval(() => {\n      //   document.title= \"TextUtils is amazing\"\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title= \"Install TextUtils Now\"\n      // }, 1500);\n\n\n    }\n    else {\n      setMode(\"light\");\n      showAlert(\"Enabled light mode\", \"success\");\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color= \"black\"\n      // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.backgroundColor = 'white';\n      // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.color = 'black';\n      // document.title=\"TextUtils - Light Mode\"\n      \n    }\n  }\n  // const RedTheme = ()=> {\n  //   if(mode !== 'red') {\n  //     setMode(\"red\");\n  //     showAlert(\"Enabled red mode\", \"success\");\n  //     document.body.style.backgroundColor = '#4d1a00';\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.backgroundColor = '#4d1a00';\n  //     document.body.style.color= \"white\"\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.color = 'white';\n  //   }\n  //   else {\n  //     setMode(\"light\");\n  //     showAlert(\"Enabled light mode\", \"success\");\n  //     document.body.style.backgroundColor = 'white';\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.backgroundColor = 'white';\n  //     document.body.style.color= \"black\"\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.color = 'black';\n  //   }\n  // }\n  // const BlueTheme = ()=> {\n  //   if(mode !== 'blue') {\n  //     setMode(\"blue\");\n  //     showAlert(\"Enabled blue mode\", \"success\");\n  //     document.body.style.backgroundColor = '#001a33';\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.backgroundColor = '#001a33';\n  //     document.body.style.color= \"white\"\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.color = 'white';\n      \n      \n  //   }\n  //   else {\n  //     setMode(\"light\");\n  //     showAlert(\"Enabled light mode\", \"success\");\n  //     document.body.style.backgroundColor = 'white';\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.backgroundColor = 'white';\n  //     document.body.style.color= \"black\"\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.color = 'black';\n\n  //   }\n  // }\n  // const GreenTheme = ()=> {\n  //   if(mode !== 'green') {\n  //     setMode(\"green\");\n  //     showAlert(\"Enabled green mode\", \"success\");\n  //     document.body.style.backgroundColor = '#003300';\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.backgroundColor = '#003300';\n  //     document.body.style.color= \"white\"\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.color = 'white';\n      \n  //   }\n  //   else {\n  //     setMode(\"light\");\n  //     showAlert(\"Enabled light mode\", \"success\");\n  //     document.body.style.backgroundColor = 'white';\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.backgroundColor = 'white';\n  //     document.body.style.color= \"black\"\n  //     // document.getElementsByClassName(\"exampleFormControlTextarea1\").style.color = 'black';\n  //   }\n  // }\n\n\n  \n\n  \n  // document.body.style.backgroundColor= mode==='red'?'red':'black';\n  \n  return (\n   <div>\n   <Router>\n    {/* <Navbar title= \"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} RedTheme={RedTheme} BlueTheme={BlueTheme} GreenTheme={GreenTheme} /> */}\n    <Navbar title= \"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}  />\n    <Alert alert={alert} />\n    <div className=\"container my-3\" >\n    <Switch >\n          <Route path=\"/about\">\n            \n            <About mode={mode} />\n          </Route>\n          <Route path=\"/\">\n          \n    < TextForm heading= \"Try TextUtils - Word Counter, Character Counter, Remove extra spaces\" mode={mode} toggleMode={toggleMode} showAlert={showAlert}  />\n    \n\n           </Route> \n        </Switch>\n        </div>  \n  \n\n    \n\n    </Router>\n    </div>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}